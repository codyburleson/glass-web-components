/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface GlassImg {
        "alt": string;
        "src": string;
    }
    interface GlassMenu {
        "dataArray": any[] | string;
        "defaultThumbnailSrc": string;
        "ruled": boolean;
    }
    interface GlassSubscribe {
        "action": string;
    }
    interface GlassTwisty {
        /**
          * Close (collapse) the twisty.
         */
        "close": () => Promise<void>;
        /**
          * Get the current  state (`"opened"` or `"closed"`)
         */
        "getState": () => Promise<string>;
        /**
          * Allows the twisty header text to be a hyperlink
         */
        "href": string;
        /**
          * Label for the twisty header; defaults to `"More..."`
         */
        "label": string;
        /**
          * Color to for the twisty header text
         */
        "labelColor": string;
        /**
          * Open (expand) the twisty.
         */
        "open": () => Promise<void>;
        /**
          * When `true`, the twisty state will be opened by default.
         */
        "opened": boolean;
        /**
          * The target of the link when the href attribute is used. One of _blank, _self, _top, _parent; default is _self
         */
        "target": string;
        /**
          * Color to for the twisty content text
         */
        "textColor": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
declare global {
    interface HTMLGlassImgElement extends Components.GlassImg, HTMLStencilElement {
    }
    var HTMLGlassImgElement: {
        prototype: HTMLGlassImgElement;
        new (): HTMLGlassImgElement;
    };
    interface HTMLGlassMenuElement extends Components.GlassMenu, HTMLStencilElement {
    }
    var HTMLGlassMenuElement: {
        prototype: HTMLGlassMenuElement;
        new (): HTMLGlassMenuElement;
    };
    interface HTMLGlassSubscribeElement extends Components.GlassSubscribe, HTMLStencilElement {
    }
    var HTMLGlassSubscribeElement: {
        prototype: HTMLGlassSubscribeElement;
        new (): HTMLGlassSubscribeElement;
    };
    interface HTMLGlassTwistyElement extends Components.GlassTwisty, HTMLStencilElement {
    }
    var HTMLGlassTwistyElement: {
        prototype: HTMLGlassTwistyElement;
        new (): HTMLGlassTwistyElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "glass-img": HTMLGlassImgElement;
        "glass-menu": HTMLGlassMenuElement;
        "glass-subscribe": HTMLGlassSubscribeElement;
        "glass-twisty": HTMLGlassTwistyElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface GlassImg {
        "alt"?: string;
        "src"?: string;
    }
    interface GlassMenu {
        "dataArray"?: any[] | string;
        "defaultThumbnailSrc"?: string;
        "onMenuItemClicked"?: (event: CustomEvent<any>) => void;
        "ruled"?: boolean;
    }
    interface GlassSubscribe {
        "action"?: string;
    }
    interface GlassTwisty {
        /**
          * Allows the twisty header text to be a hyperlink
         */
        "href"?: string;
        /**
          * Label for the twisty header; defaults to `"More..."`
         */
        "label"?: string;
        /**
          * Color to for the twisty header text
         */
        "labelColor"?: string;
        /**
          * When `true`, the twisty state will be opened by default.
         */
        "opened"?: boolean;
        /**
          * The target of the link when the href attribute is used. One of _blank, _self, _top, _parent; default is _self
         */
        "target"?: string;
        /**
          * Color to for the twisty content text
         */
        "textColor"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "glass-img": GlassImg;
        "glass-menu": GlassMenu;
        "glass-subscribe": GlassSubscribe;
        "glass-twisty": GlassTwisty;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "glass-img": LocalJSX.GlassImg & JSXBase.HTMLAttributes<HTMLGlassImgElement>;
            "glass-menu": LocalJSX.GlassMenu & JSXBase.HTMLAttributes<HTMLGlassMenuElement>;
            "glass-subscribe": LocalJSX.GlassSubscribe & JSXBase.HTMLAttributes<HTMLGlassSubscribeElement>;
            "glass-twisty": LocalJSX.GlassTwisty & JSXBase.HTMLAttributes<HTMLGlassTwistyElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
